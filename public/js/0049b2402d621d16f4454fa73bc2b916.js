var SR=(function(module,$){'use strict';var Validator=function(options){this.$form=$(options.form);this.status=[];this.config=options.config||[];if(options.auto){this.enable();}};Validator.prototype.enable=function(){this.$form.on('submit.sr_validator',$.proxy(this,'validateForm'));};Validator.prototype.disable=function(){this.$form.off('submit.sr_validator');};Validator.prototype.validates=function(){var validates=true,l=this.config.length,i=0,result,field,desc,descCustom,trackData;this.status=[];for(;i<l;i++){field=this.config[i].field;desc=this.config[i].desc||field;result=this.validateField(field);validates&=result.validates;if(result.validates){continue;}
if($.type(desc)==='function'){desc=desc.call(field,field.val());}
if($.type(desc)==='object'){for(var item in desc){if(desc.hasOwnProperty(item)&&item==='0'&&typeof desc[item]==='object'){if(desc[item].hasOwnProperty('tagName')&&desc[item].hasOwnProperty('name')){descCustom=desc[item].tagName.toLowerCase()+' field '+desc[item].name;}}}}
trackData={category:'Form error',action:this.$form.attr('name')?this.$form.attr('name')+':'+(descCustom?descCustom:desc):this.$form.attr('class')+':'+(descCustom?descCustom:desc),label:result.message};SR.tracking.trackEvent(trackData.category,trackData.action,trackData.label);this.status.push({field:field,message:result.message});}
return!!validates;};Validator.prototype.validateForm=function(){var validates=this.validates(),l=this.status.length,i=0,input;this.$form.find('.validate_box').removeClass("validate_box");this.$form.find('.form_validation').remove();for(;i<l;i++){this.showMessage(this.status[i].field,this.status[i].message);}
if(!validates){this._doubleCheck();$(this.status[0].field)
.filter(':first')
.focus();}
return validates;};Validator.prototype.validateField=function(field){var result={validates:true},$input=$(field),value=$input.val()||'',config=this.getFieldConfig(field),l=config.length,i=0,message,rule;for(;i<l;i++){rule=config[i].rule;message=config[i].message;if($.type(message)==='undefined')
message=this.messages[rule];if($.type(message)==='function')
message=message.call($input,value);if($.type(rule)==='string')
rule=this.rules[rule];if($.type(rule)!=='function')
throw'Rule required';if(!rule.call($input,value)){result.validates=false;result.message=message;break;}}
return result;};Validator.prototype.getFieldConfig=function(field){var i,match=false;for(i in this.config){if($(this.config[i].field).get(0)===$(field).get(0)){match=true;break;}}
if(!match){this.config.push({field:field,config:[]});i=this.config.length-1;}
return this.config[i].config;};Validator.prototype.addRule=function(field,rule,message){this.getFieldConfig(field).push({rule:rule,message:message});};Validator.prototype.showMessage=function(field,message){$(field).filter(':first')
.parent()
.parent()
.parent()
.addClass('validate_box');$(field)
.filter(':first')
.parent()
.before($('<span/>',{'class':'form_validation','text':message}));};Validator.prototype.reset=function(){this.status=[];this.config=[];return this;};Validator.prototype._doubleCheck=function(){var me=this;if(this._submitted){alert("There are one or more errors on the form.\n"
+'Please check and try again.');setTimeout(function(){me._submitted=false;},2000);}else{this._submitted=true;}};Validator.prototype.rules={required:function(str){return!!str;},email:function(str){return(/^.+@.+\..+$/).test(str);},password:function(str){return(str.length>=4);},date:function(str){return(/^\d{2}\/\d{2}\/\d{4}$/).test(str);},postcodeFirstHalf:function(str){return(/^(\w{1,2}\d{1,2})$/).test(str);},postcode:function(str){return(/^(\w{1,2}\d{1,2})(\w?\s?\d\w{2})$/).test(str);},zipcode:function(str){return(/^(\d{5})(-\d{4})?$/).test(str);}};Validator.prototype.messages={required:function(str){return'This field is required';},email:function(str){return'A valid e-mail address is required';},password:function(str){return'Passwords must be at least 4 characters long';},date:function(str){return'Please enter a date in the format '+SR.l('date_format');},postcodeFirstHalf:function(str){return'Please enter the first half of your postcode';},postcode:function(str){return'Please enter a valid UK postcode';},zipcode:function(str){return'Please enter a valid zipcode';}};module.Validator=Validator;return module;}(SR||{},jQuery));
SR.listing=(function(module,$){let step1=(function(){var e={},validator,scp=false,init=function(){e.$form=$('.pl_step1');e.$roomsForRent=e.$form.find('select[name=rooms_for_rent]');e.$roomsInProp=e.$form.find('select[name=rooms_in_property]');e.$occupants=e.$form.find('select[name=occupants]');e.$advertiserRole=e.$form.find('input[name=advertiser_role]');scp=e.$form.find('input[name=scp]').val()==='Y';setUpValidation();addEvents();},addEvents=function(){e.$roomsForRent
.add(e.$roomsInProp)
.change(updateOccupants);},updateOccupants=function(){if(scp){return;}
let numOccupants=e.$roomsInProp.val()-e.$roomsForRent.val();if(numOccupants<0){numOccupants=0;}
e.$occupants.val(numOccupants);},setUpValidation=function(){const config=[{field:'.form_row_postcode input',desc:'full postcode',config:[{rule:'required'}]},{field:'.form_row_role input',desc:'advertiser type',config:[{rule:function(){if($(this).filter(':checked').length||$('#advertiserRoleHiddenInput').length){return true}
return false;},message:'Please tick the role that describes you'}]}];if(scp){config.push({field:'.form_row_rent input[name=scp_price]',desc:'SCP room price',config:[{rule:'required',message:'Please enter the rent of the property'}]},{field:'.form_row_rent select[name=scp_per]',desc:'SCP room pw/pcm',config:[{rule:'required',message:'Please select whether the rent is per week '+
'or per calendar month'}]},{field:'.form_row_property_type select[name=property_type]',desc:'Property type',config:[{rule:'required',message:'Please select your property type'}]});}
if(!scp){config.push({field:'.form_row_rooms_for_rent select[name=rooms_for_rent]',desc:'Rooms for rent',config:[{rule:function(){return parseInt(e.$roomsInProp.val(),10)>=parseInt(e.$roomsForRent.val(),10);},message:"Number can't be higher than total rooms in property"}]})
config.push({field:'.form_row_occupants select[name=occupants]',desc:'Occupants',config:[{rule:function(){return e.$occupants.val()>=1||e.$advertiserRole.filter(":checked").val()!='live in landlord';},message:'There should be at least one occupant in a "Live in landlord" property'}]})
config.push({field:'.form_row_property_type select[name=property_type]',desc:'Property type',config:[{rule:'required',message:'Please select your property type'}]})}
validator=new SR.Validator({form:e.$form,auto:true,config:config});window.validatorOld=validator;};return{init:init};}()),step2=(function(){var e={},validator,scp=false,occupants=0,theproperty=false,therooms=false,thehousehold=false,theadvert=false,theaccount=false,init=function(){e.$form=$('.pl_step2');e.$rooms=e.$form.find('select[name=rooms_for_rent]');e.$occupants=e.$form.find('select[name=occupants]');e.$occupation=e.$form.find('select[name=share_type]');e.$rooms_for_rent=e.$form.find('input[name=rooms_for_rent]');e.$campusRow=e.$form.find('.form_row_campus');scp=e.$form.find('input[name=scp]').val()==='Y';theproperty=e.$form.find('input[name=theproperty]').val()==='yes';neighbourhoodId=e.$form.find('input[name=neighbourhood]').val();therooms=e.$form.find('input[name=therooms]').val()==='yes';thehousehold=e.$form.find('input[name=thehousehold]').val()==='yes';theadvert=e.$form.find('input[name=theadvert]').val()==='yes';theaccount=e.$form.find('input[name=theaccount]').val()==='yes';thefees=e.$form.find('input[name=fees_apply]').val()==='Y';thescpfees=document.getElementById('scp_fees');thenotscpfees=document.getElementById('not_scp_fees');occupants=e.$form.find('input[name=occupants]').val()||e.$occupants.val();e.$regForm=e.$form.find('.pl_login_reg_new');e.$loginForm=e.$form.find('.pl_login_reg_existing');e.$companyName=e.$form.find('input[name=company_name]');e.$advertiserRole=e.$form.find('input[name=advertiser_role]').val();e.$monthAvail=e.$form.find('select[name=month_avail]');e.$dayAvail=e.$form.find('select[name=day_avail]');e.$yearAvail=e.$form.find('select[name=year_avail]');e.$regEmail=e.$regForm.find('input[name=email]');e.$regEmailAgain=e.$regForm.find('input[name=email_again]');e.$regPassword=e.$regForm.find('input[name=password]');e.$regPasswordAgain=e.$regForm.find('input[name=password_again]');e.$loginEmail=e.$loginForm.find('input[name=login_email]');e.$backButton=e.$form.find('input[name=prev_step]');setUpValidation();addEvents();e.$occupation.trigger('change');},addEvents=function(){e.$rooms.change(changeRooms);e.$occupants.change(submitForm);e.$occupation.change(toggleCampus);e.$backButton.on('click',function callback(){validator.disable();});},toggleCampus=function(){e.$campusRow.toggle($(this).val()==='S');},submitForm=function(){validator.disable();e.$form.trigger('submit');},changeRooms=function(){let before=$(this).data('rooms_for_rent'),after=$(this).val(),decreased=after<before,increased=after>before,submit=false,message='If a room has been let, you should mark it as '+
'taken by the room - click OK to proceed with deletion';if(increased||decreased){if(decreased){setTimeout(function callback(){if(confirm(message)){submitForm();}},10);}else{submitForm();}}},unexpectedPrice=function(price,per){let min=e.$form.find('input[name=expected_min_price_pw]').val(),max=e.$form.find('input[name=expected_max_price_pw]').val(),pcm=(price/4.333333333333),pw=(per==='pcm')?pcm:price;return((per==='pcm'&&pw<min&&price<max)||(per==='pw'&&pw>max&&pcm>min));},roomPriceOk=function(str){let price=parseInt(str||0,10),per=$(this)
.parents('.form_inputs')
.find('input[name^=roomper]:checked').val(),roomNr=this[0].name.slice(-1),trackData;if(unexpectedPrice(price,per)){trackData={category:'Form error',action:""+$(this).parents('form').attr('name')+"Room Price"+roomNr,label:'Price not within average min max - message shown'};SR.tracking.trackEvent(trackData.category,trackData.action,trackData.label);if(confirm("Are you sure you meant "+SR.l('Â£')+price+" "+per+" instead of "+(per==='pw'?'pcm':'pw')+"?")===true){SR.tracking.trackEvent(trackData.category,trackData.action,'Price not within average min max - user confirmed correct');return true;}
return false;}
return true;},roomPerOk=function(){return(/p(w|cm)/).test($(this).filter(':checked').val());},feesApplyOk=function(){return(/(Y|N)/).test($(this).filter(':checked').val());},furnishingsOk=function(){return(/(furnished|partfurnished|unfurnished)/).test($(this).filter(':checked').val());},validDate=function(){var selectedMonth=parseInt(e.$monthAvail.val(),10)-1;var daysInSelectedMonth=new Date(e.$yearAvail.val(),selectedMonth,e.$dayAvail.val()).getMonth();if(daysInSelectedMonth!==selectedMonth){return false;}
return true;}
housingBenefitsOk=function(){return(/(Y|N)/).test($(this).filter(':checked').val())},fillingNewUserForm=function(){if(!e.$regEmail.val()&&!e.$loginEmail.val()){return false;}
if(e.$loginEmail.val()){return false;}
return true;},setUpValidation=function(){let i=1,l=e.$rooms_for_rent.val(),config=[];if(theproperty&&!neighbourhoodId){config.push({field:'.form_row_area_drop select',desc:'Neighbourhood drop down list',config:[{rule:'required',message:'Please select an area'}]});}
if(thehousehold){config.push({field:'.form_input select[name=gender]',desc:'Current household gender',config:[{rule:function(){return $(this).val()!="NULL";},message:'Please select a gender'}]});}
if(theadvert){var dssRule={rule:function(){console.log($(this).val());return!$(this).val().match(/no dss|no housing benefit/i);},message:'"No DSS/Housing Benefit" allowed in ad text'};config.push({field:'.form_row_title input',desc:'Ad title',config:[{rule:'required',message:'Please enter a title for your advert'},dssRule]},{field:'.form_row_description textarea',desc:'Ad description',config:[{rule:function(){if($(this).val().length>=100||$(this).val().split(' ').length>=25){return true;}
return false;},message:'Please enter your advert text, it must be at'+
' least 25 words (or 100 characters) long. This is to'+
' ensure that you get the best possible response and'+
' that our listings are of a high quality.',},dssRule]},{field:'.form_row_name input[name=first_name]',desc:'First name',config:[{rule:'required',message:'Please enter your first name (you can choose not'+
' to display your last name if you wish)'}]},{field:'.form_row_name input[name=last_name]',desc:'Last name',config:[{rule:'required',message:'Please enter your last name (it will not be'+
' displayed on your ad unless you tick the box below it)'}]});}
if(!SR.user.id&&theaccount){config.push({field:'.form_row_email input[name=email]',desc:'New / Existing user',config:[{rule:function(){return(e.$regEmail.val()||e.$loginEmail.val());},message:"If you are a new user, fill in the details below, otherwise if you are an existing user please fill in the details under 'Existing user?'"}]});config.push({field:e.$regEmailAgain,desc:function(){if(!e.$regEmailAgain.val()){return"New user confirm email missing";}
return"New user confirm email mismatch";},config:[{rule:function(){if(!fillingNewUserForm()){return true;}
return(e.$regEmail.val()&&!e.$loginEmail.val()&&e.$regEmailAgain.val()&&e.$regEmailAgain.val()==e.$regEmail.val());},message:function(){if(!e.$regEmailAgain.val()){return"Please confirm your email";}
return"The emails you entered do not match";}}]});config.push({field:'.form_row_password input[name=password]',desc:'New user password',config:[{rule:function(){if(!fillingNewUserForm()){return true;}
return(e.$regEmail.val()&&!e.$loginEmail.val()&&e.$regPassword.val());},message:"Please choose a password"}]});config.push({field:e.$regPasswordAgain,desc:function(){if(!e.$regPasswordAgain.val()){return"New user confirm password missing";}
return"New user confirm password mismatch";},config:[{rule:function(){if(!fillingNewUserForm()){return true;}
return(e.$regEmail.val()&&!e.$loginEmail.val()&&e.$regPasswordAgain.val()&&e.$regPasswordAgain.val()==e.$regPassword.val());},message:function(){if(!e.$regPasswordAgain.val()){return"Please confirm your password";}
return"The passwords you entered do not match";}}]});}
if(!scp&&therooms){for(;i<=l;i++){config.push({field:".form_row_cost input[name=roomprice"+i+"]",desc:"Room price"+i,config:[{rule:'required',message:'Please enter the room price'},{rule:roomPriceOk,message:'Price not within average min max - user confirmed incorrect'}]},{field:".form_row_cost input[name^=roomper"+i+"]",desc:"Room pw/pcm"+i,config:[{rule:roomPerOk,message:'Please specify pw or pcm'}]},{field:".form_row_amenities input[name=roomfurnishings"+i+"]",desc:"Furnishings for room"+i,config:[{rule:furnishingsOk,message:'Please specify room furnishings'}]});}
config.push({field:".form_row_avail_from select[name=day_avail]",desc:"Date available from",config:[{rule:validDate,message:'Please check that you have selected a valid date'}]})}
if(scp&&theproperty){config.push({field:".form_row_furnishings input[name=furnishings]",desc:"Furnishings for property",config:[{rule:furnishingsOk,message:'Please specify furnishings'}]},{field:".form_row_avail_from select[name=day_avail]",desc:"Date available from",config:[{rule:validDate,message:'Please check that you have selected a valid date'}]});}
if(SR.settings.siteId==12&&thefees&&(thenotscpfees||thescpfees)){config.push({field:".form_row_fees_apply input[name=fees_apply]",desc:"Broker Fee",config:[{rule:feesApplyOk,message:'Please specify if there are any fees'}]});}
if(e.$advertiserRole=='agent'&&theadvert){config.push({field:e.$companyName,desc:'Company name',config:[{rule:'required',message:'Please enter a company name'}]});}
validator=new SR.Validator({form:e.$form,auto:true,config:config});};return{init:init,unexpectedPrice:unexpectedPrice};}());module.placeOffered={step1:step1,step2:step2};return module;}(SR.listing||{},jQuery));